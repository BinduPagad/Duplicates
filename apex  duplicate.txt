 cmp.set('v.mycolumns', [
            {label: 'Contact Name', fieldName: 'Name', type: 'text'},
            {label: 'Phone', fieldName: 'Phone', type: 'text'},
            {label: 'Email', fieldName: 'Email', type: 'text'}
        ]);




  
         String condtion = '';
        if(fields != null && !fields.isEmpty()){
            for(String f: fields){
                string condtion += f'='\''+names[0] +'\'';            
            }
            
        }
       

public class duplicateFieldSet {
    public String querystr{get;set;}
    public List<Contact> al{get;set;}
  
    public void duplicateFieldSet(){
        querystr = 'select id';
        for(Schema.FieldSetMember fsm :SObjectType.Contact.FieldSets.Duplicate_Contact_List_Fields.getFields()) {
            querystr += ', ' + fsm.getFieldPath();
        }
       
        querystr+= ' from Contact  limit 2'  ;
        al= Database.query(querystr);
        system.debug('al++ '+al);
        system.debug(al.size());
    }
}





public class duplicateFieldSet {
   // public String querystr{get;set;}
   // public List<Contact> al{get;set;}
    
    @AuraEnabled
    public static list<wrapperClass2> duplicateFieldSet(){
        List<wrapperClass2> matchingDetailsList = new List<wrapperClass2>();
        String querystr;
        string al;
        wrapperClass wrapperFetch = new wrapperClass();
        querystr = 'select id'; 
        for(Schema.FieldSetMember fsm :SObjectType.Contact.fieldSets.getMap().get('Duplicate_Contact_List_Fields').getFields()) {
            querystr += ', ' + fsm.getFieldPath();
        }
        system.debug('querystr'+querystr);
       
        querystr+= ' from Contact  limit 2'  ;
        wrapperFetch.strList =  querystr+;
        system.debug('wrapperFetch.strList'+wrapperFetch.strList);
        
        al= Database.query(querystr);
        Map<String,String> mapObj1 = new Map<String,String>();   
        mapObj1.put('id',al[0].id);
        mapObj1.put('firstname',al[0].firstname);
        mapObj1.put('lastname',al[0].lastname);
        mapObj1.put('phone',al[0].phone);
        mapObj1.put('Languages__c',al[0].Languages__c);
        mapObj1.put('Email',al[0].Email);
        
        Map<String,String> mapObj2 = new Map<String,String>();   
        mapObj2.put('id',al[1].id);
        mapObj2.put('firstname',al[1].firstname);
        mapObj2.put('lastname',al[1].lastname);
        mapObj2.put('phone',al[1].phone);
        mapObj2.put('Languages__c',al[1].Languages__c);
        mapObj2.put('Email',al[1].Email);
        
        List<String> listRecord1 = new List<string>();
        listRecord1.add(al[0].id);
        listRecord1.add(al[0].firstname);
        listRecord1.add(al[0].lastname);
        listRecord1.add(al[0].phone);
        listRecord1.add(al[0].Languages__c);
        listRecord1.add(al[0].Email);
        system.debug('listRecord1'+listRecord1);
        
        List<String> listRecord2 = new List<string>();
        listRecord2.add(al[1].id);
        listRecord2.add(al[1].firstname);
        listRecord2.add(al[1].lastname);
        listRecord2.add(al[1].phone);
        listRecord2.add(al[1].Languages__c);
        listRecord2.add(al[1].Email);
        system.debug('listRecord2'+listRecord2);
        
        for(String s:fieldMap.keySet()){
            wrapperClass2 tempDetails = new wrapperClass2();
            tempDetails.fieldName = s;
            if(mapObj1.get(s) != null){
                tempDetails.contact1 = mapObj1.get(s);
            }
            if(mapObj2.get(s) != null){
                tempDetails.contact2 = mapObj2.get(s);
            }                  
            matchingDetailsList.add(tempDetails);
        }
        return matchingDetailsList;
        
        system.debug('al++ '+al);
        system.debug(al.size());
    }

public class wrapperClass{
    @AuraEnabled public list<String> strList {get;set;}
    @AuraEnabled public List<string> lstContact{get;set;}
    @AuraEnabled public List<string> lstContact2{get;set;}
}
public class wrapperClass2{
    @AuraEnabled public string fieldName;
    @AuraEnabled public String record1;
    @AuraEnabled public String record2;
}
}
        

 //Get Object Details
        map<String,Schema.SObjectType>  GlobalDescribeMap = Schema.getGlobalDescribe();
        Schema.SObjectType SObjectTypeObj = GlobalDescribeMap.get(strObjName);
        Schema.DescribeSObjectResult DescribeSObjectResultObj = SObjectTypeObj.getDescribe();
        map<String,schema.SObjectField>describeObjectFields = SObjectTypeObj.getDescribe().fields.getMap();
        
        //Get FieldSet Details
        Schema.FieldSet  fieldSetObj = DescribeSObjectResultObj.FieldSets.getMap().get('Duplicate_Contact_List_Fields');
        List<string,Schema.SObjectField> fieldset = fieldSetObj.getFields();




APEX - 
public class duplicateWrapperClass {
    @AuraEnabled
    public static List<sobject> fetchConDuplicates(List<string> fields, string objName , List<string> names){
        system.debug('fields'+fields.size());
        string s ='';
        for(string a : fields){
            s += a+',';
        }
        String str=s;
        str=str.removeEnd(',');
        system.debug('str==='+str);
        string genQuery = 'select '+str+' from '+objName ;
        system.debug('genQuery'+genQuery);
        list<sObject> sobjList =Database.query(genQuery);
        system.debug('sobjList'+sobjList);
        return sobjList;
    }
    
    @AuraEnabled 
    public static List<wrapperClassReturn> doThisMethod(String strObjName){
        List<wrapperClassReturn> wrapperReturnList = new List<wrapperClassReturn> ();
        wrapperClass wrapperFetch = new wrapperClass();
        String querystr ;
        List<Contact> al;        
        querystr = 'select id';
     
        
        for(Schema.FieldSetMember fsm :SObjectType.Contact.fieldSets.getMap().get('Duplicate_Contact_List_Fields').getFields()) {
            querystr += ', ' + fsm.getFieldPath();
            system.debug('querystr'+querystr);
        }
        querystr+= ' from Contact limit 2'  ;
        system.debug('querystr'+querystr);
        al= Database.query(querystr);
        
        Map<String,String> mapObj1 = new Map<String,String>();   
        mapObj1.put('Id',al[0].Id);
        mapObj1.put('FirstName',al[0].FirstName);
        mapObj1.put('LastName',al[0].LastName);
        mapObj1.put('Phone',al[0].Phone);
        mapObj1.put('Languages__c',al[0].Languages__c);
        mapObj1.put('Email',al[0].Email);
        system.debug('mapObj1=='+mapObj1);
        
        Map<String,String> mapObj2 = new Map<String,String>();   
        mapObj2.put('Id',al[1].Id);
        mapObj2.put('FirstName',al[1].FirstName);
        mapObj2.put('LastName',al[1].LastName);
        mapObj2.put('Phone',al[1].Phone);
        mapObj2.put('Languages__c',al[1].Languages__c);
        mapObj2.put('Email',al[1].Email);
        system.debug('mapObj1=='+mapObj2);
        
        List<String> listRecord1 = new List<string>();
        listRecord1.add(al[0].id);
        listRecord1.add(al[0].firstname);
        listRecord1.add(al[0].lastname);
        listRecord1.add(al[0].phone);
        listRecord1.add(al[0].Languages__c);
        listRecord1.add(al[0].Email);
        system.debug('listRecord1'+listRecord1);
        
        List<String> listRecord2 = new List<string>();
        listRecord2.add(al[1].id);
        listRecord2.add(al[1].firstname);
        listRecord2.add(al[1].lastname);
        listRecord2.add(al[1].phone);
        listRecord2.add(al[1].Languages__c);
        listRecord2.add(al[1].Email);
        system.debug('listRecord2'+listRecord2);
        
        for(Schema.FieldSetMember s:SObjectType.Contact.fieldSets.getMap().get('Duplicate_Contact_List_Fields').getFields()){
            wrapperClassReturn tempDetails = new wrapperClassReturn();
            tempDetails.fieldName = s.getFieldPath();
            if(mapObj1.get(s.getFieldPath()) != null){
                tempDetails.recordList1 = mapObj1.get(s.getFieldPath());
            }
            if(mapObj2.get(s.getFieldPath()) != null){
                tempDetails.recordList2 = mapObj2.get(s.getFieldPath());
            }                  
            wrapperReturnList.add(tempDetails);
        }
        return wrapperReturnList;
    }
    
    public class wrapperClass{
        @AuraEnabled public list<String> strList {get;set;}
        @AuraEnabled public List<string> record1{get;set;}
        @AuraEnabled public List<string> record2{get;set;}
    }
    
    public class wrapperClassReturn{
        @AuraEnabled public String fieldName;
        @AuraEnabled public String recordList1;
        @AuraEnabled public  String recordList2;
    }
}